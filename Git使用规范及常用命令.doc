Mime-Version: 1.0
Content-Base: chrome-extension://cggoamjkdfofnimkkbdmnlhjacbfipgg/index.html
Content-Type: Multipart/related; boundary="NEXT.ITEM-BOUNDARY";type="text/html"

--NEXT.ITEM-BOUNDARY
Content-Type: text/html; charset="utf-8"
Content-Location: chrome-extension://cggoamjkdfofnimkkbdmnlhjacbfipgg/index.html

<!DOCTYPE html>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<style>

</style>
</head>
<body>
	<div class="preview html_preview"><h1 class="story_title">Git使用规范及常用命令</h1><div class="xiaoshujiang_element xsj_anchor">
  <a name="e8a784e88c83_1" class="blank_anchor_name"></a><a id="e8a784e88c83_1" class="blank_anchor_id"></a><a name="规范" class="blank_anchor_name"></a><a id="规范" class="blank_anchor_id"></a>
</div>
<h2>规范</h2>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="5be5bbbae8aeae5d20master20e58886e694afe4bb85e794a8e69da5e58f91e5b883e696b0e78988e69cacefbc8ce4b88de58581e8aeb8e59ca8e4b88ae99da2e5bc80e58f91_2" class="blank_anchor_name"></a><a id="5be5bbbae8aeae5d20master20e58886e694afe4bb85e794a8e69da5e58f91e5b883e696b0e78988e69cacefbc8ce4b88de58581e8aeb8e59ca8e4b88ae99da2e5bc80e58f91_2" class="blank_anchor_id"></a><a name="建议-master-分支仅用来发布新版本不允许在上面开发" class="blank_anchor_name"></a><a id="建议-master-分支仅用来发布新版本不允许在上面开发" class="blank_anchor_id"></a>
</div>
<h4>[建议] master 分支仅用来发布新版本，不允许在上面开发</h4>
<p>使用分支能够有效地避免不同开发工作之间的相关干扰。</p>
<p>当需要开发新功能、修复bug、试验新的想法时，应该新建一个分支，待开发工作完成并测试后，再把工作分区合并到主分区上。</p>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="5be5bcbae588b65d20e68f90e4baa4e697b6e9a1bbe5b8a6e4b88ae6b885e699b0e79a84e68f8fe8bfb0_3" class="blank_anchor_name"></a><a id="5be5bcbae588b65d20e68f90e4baa4e697b6e9a1bbe5b8a6e4b88ae6b885e699b0e79a84e68f8fe8bfb0_3" class="blank_anchor_id"></a><a name="强制-提交时须带上清晰的描述" class="blank_anchor_name"></a><a id="强制-提交时须带上清晰的描述" class="blank_anchor_id"></a>
</div>
<h4>[强制] 提交时须带上清晰的描述</h4>
<p>提交信息格式：</p>
<div class="xiaoshujiang_code_container"><pre><code data-info="" class="nohighlight hljs">第一行：一句话简单总结一下你做的修改（别超过50个字）
第二行：空行（建议空行）
剩余行：详细描述。为什么要做这次改动？跟以前的实现有什么不一样？
</code></pre></div>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="5be5bbbae8aeae5d20e79bb8e585b3e79a84e694b9e58aa8e6898de694bee59ca8e4b880e8b5b7e68f90e4baa4_4" class="blank_anchor_name"></a><a id="5be5bbbae8aeae5d20e79bb8e585b3e79a84e694b9e58aa8e6898de694bee59ca8e4b880e8b5b7e68f90e4baa4_4" class="blank_anchor_id"></a><a name="建议-相关的改动才放在一起提交" class="blank_anchor_name"></a><a id="建议-相关的改动才放在一起提交" class="blank_anchor_id"></a>
</div>
<h4>[建议] 相关的改动才放在一起提交</h4>
<p>一次提交（git commit）应该只包含相关的改动。比如说，修复两个不同的bug就应该分开来做两次提交。提交的改动越小（或越少），其他开发者理解起来就越容易；如果改动有问题，退回去也比较方便。Git有一个暂存区域（staging area）的概念，它还允许你暂存文件的某些部分，这更便于你创建非常细粒度的提交。</p>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="5be5bbbae8aeae5d20e7bb8fe5b8b8e680a7e59cb0e68f90e4baa4_5" class="blank_anchor_name"></a><a id="5be5bbbae8aeae5d20e7bb8fe5b8b8e680a7e59cb0e68f90e4baa4_5" class="blank_anchor_id"></a><a name="建议-经常性地提交" class="blank_anchor_name"></a><a id="建议-经常性地提交" class="blank_anchor_id"></a>
</div>
<h4>[建议] 经常性地提交</h4>
<p>经常提交势必让你每次提交的东西都很少，也有助于你只提交相关的改动。并且，你还能更频繁地与别人共享代码。通过这种方式，所有人在集成代码时都会感觉更轻松，也就能避免一些不必要的冲突。相比之下，如果每次提交的东西很多、改动很大、时间间隔很长，那么在代码合并（merge）过程中产生的冲突就很难解决了。</p>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="5be5bbbae8aeae5d20e9ab98e9a291e78e87e38081e7bb86e7b292e5baa6e59cb0e68f90e4baa4_6" class="blank_anchor_name"></a><a id="5be5bbbae8aeae5d20e9ab98e9a291e78e87e38081e7bb86e7b292e5baa6e59cb0e68f90e4baa4_6" class="blank_anchor_id"></a><a name="建议-高频率-细粒度地提交" class="blank_anchor_name"></a><a id="建议-高频率-细粒度地提交" class="blank_anchor_id"></a>
</div>
<h4>[建议] 高频率、细粒度地提交</h4>
<p>把大功能的实现尽可能分解成更多的相对独立的小模块，每个小模块测试完成后提交修改，再开始下一模块的开发。</p>
<p>这样做能保证每次提交的内容高度相关，方便定为错误、解决合并冲突。</p>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="5be5bbbae8aeae5d2020e68f90e4baa4e4b98be5898de8bf9be8a18ce6b58be8af95_7" class="blank_anchor_name"></a><a id="5be5bbbae8aeae5d2020e68f90e4baa4e4b98be5898de8bf9be8a18ce6b58be8af95_7" class="blank_anchor_id"></a><a name="建议-提交之前进行测试" class="blank_anchor_name"></a><a id="建议-提交之前进行测试" class="blank_anchor_id"></a>
</div>
<h4>[建议]  提交之前进行测试</h4>
<p>提交之前进行测试，测试完成并且没有错误才提交。</p>
<p>但当你把代码推送（git push）到服务器与别人共享时，这个问题就大了——在这之前，请务必测试你的代码！</p>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="e5b8b8e794a8e591bde4bba4_8" class="blank_anchor_name"></a><a id="e5b8b8e794a8e591bde4bba4_8" class="blank_anchor_id"></a><a name="常用命令" class="blank_anchor_name"></a><a id="常用命令" class="blank_anchor_id"></a>
</div>
<h2>常用命令</h2>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="e696b0e5bbbae4bba3e7a081e5ba93_9" class="blank_anchor_name"></a><a id="e696b0e5bbbae4bba3e7a081e5ba93_9" class="blank_anchor_id"></a><a name="新建代码库" class="blank_anchor_name"></a><a id="新建代码库" class="blank_anchor_id"></a>
</div>
<h4>新建代码库</h4>
<div class="xiaoshujiang_code_container"><pre><code data-info="" class="nohighlight hljs"># 在当前目录新建一个Git代码库
$ git init

# 新建一个目录，将其初始化为Git代码库
$ git init [project-name]

# 下载一个项目和它的整个代码历史
$ git clone [url]
</code></pre></div>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="e9858de7bdae_10" class="blank_anchor_name"></a><a id="e9858de7bdae_10" class="blank_anchor_id"></a><a name="配置" class="blank_anchor_name"></a><a id="配置" class="blank_anchor_id"></a>
</div>
<h4>配置</h4>
<div class="xiaoshujiang_code_container"><pre><code data-info="" class="nohighlight hljs"># 显示当前的Git配置
$ git config --list

# 编辑Git配置文件
$ git config -e [--global]

# 设置提交代码时的用户信息
$ git config [--global] user.name "[name]"
$ git config [--global] user.email "[email address]"
</code></pre></div>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="e5a29ee58aa0e588a0e999a4e69687e4bbb6_11" class="blank_anchor_name"></a><a id="e5a29ee58aa0e588a0e999a4e69687e4bbb6_11" class="blank_anchor_id"></a><a name="增加删除文件" class="blank_anchor_name"></a><a id="增加删除文件" class="blank_anchor_id"></a>
</div>
<h4>增加/删除文件</h4>
<div class="xiaoshujiang_code_container"><pre><code data-info="" class="nohighlight hljs"># 添加指定文件到暂存区
$ git add [file1] [file2] ...

# 添加指定目录到暂存区，包括子目录
$ git add [dir]

# 添加当前目录的所有文件到暂存区
$ git add .

# 添加每个变化前，都会要求确认
# 对于同一个文件的多处变化，可以实现分次提交
$ git add -p

# 删除工作区文件，并且将这次删除放入暂存区
$ git rm [file1] [file2] ...

# 停止追踪指定文件，但该文件会保留在工作区
$ git rm --cached [file]

# 改名文件，并且将这个改名放入暂存区
$ git mv [file-original] [file-renamed]
</code></pre></div>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="e4bba3e7a081e68f90e4baa4_12" class="blank_anchor_name"></a><a id="e4bba3e7a081e68f90e4baa4_12" class="blank_anchor_id"></a><a name="代码提交" class="blank_anchor_name"></a><a id="代码提交" class="blank_anchor_id"></a>
</div>
<h4>代码提交</h4>
<div class="xiaoshujiang_code_container"><pre><code data-info="" class="nohighlight hljs"># 提交暂存区到仓库区
$ git commit -m [message]

# 提交暂存区的指定文件到仓库区
$ git commit [file1] [file2] ... -m [message]

# 提交工作区自上次commit之后的变化，直接到仓库区
$ git commit -a

# 提交时显示所有diff信息
$ git commit -v

# 使用一次新的commit，替代上一次提交
# 如果代码没有任何新变化，则用来改写上一次commit的提交信息
$ git commit --amend -m [message]

# 重做上一次commit，并包括指定文件的新变化
$ git commit --amend [file1] [file2] ...
</code></pre></div>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="e58886e694af_13" class="blank_anchor_name"></a><a id="e58886e694af_13" class="blank_anchor_id"></a><a name="分支" class="blank_anchor_name"></a><a id="分支" class="blank_anchor_id"></a>
</div>
<h4>分支</h4>
<div class="xiaoshujiang_code_container"><pre><code data-info="" class="nohighlight hljs"># 列出所有本地分支
$ git branch

# 列出所有远程分支
$ git branch -r

# 列出所有本地分支和远程分支
$ git branch -a

# 新建一个分支，但依然停留在当前分支
$ git branch [branch-name]

# 新建一个分支，并切换到该分支
$ git checkout -b [branch]

# 新建一个分支，指向指定commit
$ git branch [branch] [commit]

# 新建一个分支，与指定的远程分支建立追踪关系
$ git branch --track [branch] [remote-branch]

# 切换到指定分支，并更新工作区
$ git checkout [branch-name]

# 切换到上一个分支
$ git checkout -

# 建立追踪关系，在现有分支与指定的远程分支之间
$ git branch --set-upstream [branch] [remote-branch]

# 合并指定分支到当前分支
$ git merge [branch]

# 选择一个commit，合并进当前分支
$ git cherry-pick [commit]

# 删除分支
$ git branch -d [branch-name]

# 删除远程分支
$ git push origin --delete [branch-name]
$ git branch -dr [remote/branch]
</code></pre></div>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="e6a087e7adbe_14" class="blank_anchor_name"></a><a id="e6a087e7adbe_14" class="blank_anchor_id"></a><a name="标签" class="blank_anchor_name"></a><a id="标签" class="blank_anchor_id"></a>
</div>
<h4>标签</h4>
<div class="xiaoshujiang_code_container"><pre><code data-info="" class="nohighlight hljs"># 列出所有tag
$ git tag

# 新建一个tag在当前commit
$ git tag [tag]

# 新建一个tag在指定commit
$ git tag [tag] [commit]

# 删除本地tag
$ git tag -d [tag]

# 删除远程tag
$ git push origin :refs/tags/[tagName]

# 查看tag信息
$ git show [tag]

# 提交指定tag
$ git push [remote] [tag]

# 提交所有tag
$ git push [remote] --tags

# 新建一个分支，指向某个tag
$ git checkout -b [branch] [tag]
</code></pre></div>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="e69fa5e79c8be4bfa1e681af_15" class="blank_anchor_name"></a><a id="e69fa5e79c8be4bfa1e681af_15" class="blank_anchor_id"></a><a name="查看信息" class="blank_anchor_name"></a><a id="查看信息" class="blank_anchor_id"></a>
</div>
<h4>查看信息</h4>
<div class="xiaoshujiang_code_container"><pre><code data-info="" class="nohighlight hljs"># 显示有变更的文件
$ git status

# 显示当前分支的版本历史
$ git log

# 显示commit历史，以及每次commit发生变更的文件
$ git log --stat

# 搜索提交历史，根据关键词
$ git log -S [keyword]

# 显示某个commit之后的所有变动，每个commit占据一行
$ git log [tag] HEAD --pretty=format:%s

# 显示某个commit之后的所有变动，其"提交说明"必须符合搜索条件
$ git log [tag] HEAD --grep feature

# 显示某个文件的版本历史，包括文件改名
$ git log --follow [file]
$ git whatchanged [file]

# 显示指定文件相关的每一次diff
$ git log -p [file]

# 显示过去5次提交
$ git log -5 --pretty --oneline

# 显示所有提交过的用户，按提交次数排序
$ git shortlog -sn

# 显示指定文件是什么人在什么时间修改过
$ git blame [file]

# 显示暂存区和工作区的差异
$ git diff

# 显示暂存区和上一个commit的差异
$ git diff --cached [file]

# 显示工作区与当前分支最新commit之间的差异
$ git diff HEAD

# 显示两次提交之间的差异
$ git diff [first-branch]...[second-branch]

# 显示今天你写了多少行代码
$ git diff --shortstat "@{0 day ago}"

# 显示某次提交的元数据和内容变化
$ git show [commit]

# 显示某次提交发生变化的文件
$ git show --name-only [commit]

# 显示某次提交时，某个文件的内容
$ git show [commit]:[filename]

# 显示当前分支的最近几次提交
$ git reflog
</code></pre></div>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="e8bf9ce7a88be5908ce6ada5_16" class="blank_anchor_name"></a><a id="e8bf9ce7a88be5908ce6ada5_16" class="blank_anchor_id"></a><a name="远程同步" class="blank_anchor_name"></a><a id="远程同步" class="blank_anchor_id"></a>
</div>
<h4>远程同步</h4>
<div class="xiaoshujiang_code_container"><pre><code data-info="" class="nohighlight hljs"># 下载远程仓库的所有变动
$ git fetch [remote]

# 显示所有远程仓库
$ git remote -v

# 显示某个远程仓库的信息
$ git remote show [remote]

# 增加一个新的远程仓库，并命名
$ git remote add [shortname] [url]

# 取回远程仓库的变化，并与本地分支合并
$ git pull [remote] [branch]

# 上传本地指定分支到远程仓库
$ git push [remote] [branch]

# 强行推送当前分支到远程仓库，即使有冲突
$ git push [remote] --force

# 推送所有分支到远程仓库
$ git push [remote] --all
</code></pre></div>
<div class="xiaoshujiang_element xsj_anchor">
  <a name="e692a4e99480_17" class="blank_anchor_name"></a><a id="e692a4e99480_17" class="blank_anchor_id"></a><a name="撤销" class="blank_anchor_name"></a><a id="撤销" class="blank_anchor_id"></a>
</div>
<h4>撤销</h4>
<div class="xiaoshujiang_code_container"><pre><code data-info="" class="nohighlight hljs"># 恢复暂存区的指定文件到工作区
$ git checkout [file]

# 恢复某个commit的指定文件到暂存区和工作区
$ git checkout [commit] [file]

# 恢复暂存区的所有文件到工作区
$ git checkout .

# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变
$ git reset [file]

# 重置暂存区与工作区，与上一次commit保持一致
$ git reset --hard

# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变
$ git reset [commit]

# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致
$ git reset --hard [commit]

# 重置当前HEAD为指定commit，但保持暂存区和工作区不变
$ git reset --keep [commit]

# 新建一个commit，用来撤销指定commit
# 后者的所有变化都将被前者抵消，并且应用到当前分支
$ git revert [commit]

# 暂时将未提交的变化移除，稍后再移入
$ git stash
$ git stash pop
</code></pre></div>
</div>
</body></html>
--NEXT.ITEM-BOUNDARY--